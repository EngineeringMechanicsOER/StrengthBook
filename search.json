[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "deformsbook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "workoutproblem.html",
    "href": "workoutproblem.html",
    "title": "1Â  Strength of Materials Problem Workout",
    "section": "",
    "text": "To scaffold your learning in this example, we have provided a free body diagram for you and a repeat of the problem statement.\nA city planner is installing a new traffic light. Light A weighs 65 lb, while lights B and C weigh 50 lb each. The post at O has a hollow circular cross-section with an outer diameter of 5 inches and a wall thickness of 0.2 inches. It will be made from aluminum alloy with a tensile yield stress of 35 ksi and a compressive yield stress of 20 ksi. A factor of safety of 2 is required with respect to yield. You may ignore the weight of the post.\n\n\n\nFigure 1: Three traffic light installation with loads\n\n\nPlease work through the problem step by step showing your math in the interactive interface here.\n#| standalone: true\n#| viewerHeight: 420\n#| components: [viewer]\nfrom shiny import App, render, ui, reactive, req\nfrom sympy import solve, Eq, Symbol\nfrom sympy.parsing.sympy_parser import parse_expr\nfrom shiny.ui import h4\n\n# load equations lists\n\n\nclass eqn:\n    def __init__(self, name, inline_math, newline_math, working_sym, working_eqn_latex,working_eqn_solver):\n        self.name = name\n        self.inline_math = inline_math\n        self.newline_math = newline_math\n        self.working_sym = working_sym\n        self.working_eqn_latex = working_eqn_latex\n        self.working_eqn_solver = working_eqn_solver\n\nStaticsSumFx = eqn(\n    \"Equilibrium Forces in X\", \n    \"\\(\\Sigma F_x=0\\)\", \n    \"$$\\Sigma F_x=0$$\", \n    \"SigmaFx\",\n    \"$$F_x1+F_x2+F_x3+F_x4+F_x5=0$$\",\n    \"F_x1+F_x2+F_x3+F_x4+F_x5=0\"\n)\n\nStaticsSumFy = eqn(\n    \"Equilibrium Forces in Y\", \n    \"\\(\\Sigma F_y=0\\)\", \n    \"$$\\Sigma F_y=0$$\", \n    \"SigmaFy\",\n    \"$$F_y1+F_y2+F_y3+F_y4+F_y5=0$$\",\n    \"F_y1+F_y2+F_y3+F_y4+F_y5=0\"\n)\n\nStaticsSumM = eqn(\n    \"Equilibrium Moments about O\", \n    \"\\(\\Sigma M_O=0\\)\", \n    \"$$\\Sigma M_O=0$$\", \n    \"SigmaM\",\n    \"$$M_1+M_2+M_3+M_4+M_5=0$$\",\n    \"M_1+M_2+M_3+M_4+M_5=0\"\n)\n\nStressEqn = eqn(\n    \"Stress Equation\", \n    \"\\(\\sigma=\\\\frac{F}{A}\\)\", \n    \"$$\\sigma=\\\\frac{F}{A}$$\", \n    \"sigma,F,A\",\n    \"$$\\sigma=\\\\frac{(F)}{(A)}$$\",\n    \"Eq(sigma,(F)/(A))\"\n)\n\nAxialDeform = eqn(\n    \"Axial Deformation by Force\",\n    \"\\(\\delta_l=\\\\frac{P L}{AE}\\)\",\n    \"$$\\delta_l=\\\\frac{P L}{AE}$$\",\n    \"delta_l,P,L,A,E\",\n    \"$$\\delta_l=\\\\frac{(P)(L)}{(A)(E)}$$\",\n    \"delta_l=(P)*(L)/(A)/(E)\"\n)\n\nThermalDeform = eqn(\n    \"Axial Deformation by Thermal\",\n    \"\\(\\delta_t= \\\\alpha \\Delta T L\\)\",\n    \"$$\\delta_t= \\\\alpha \\Delta T L$$\",\n    \"delta_t,alpha,DeltaT,L\",\n    \"$$\\delta_t= \\\\alpha \\Delta T L$$\",\n    \"delta_t= alpha*(Delta_T)*L\"\n)\n\nAreaTube = eqn(\n    \"Area of a Tube\", \n    \"\\(A_{tube}=\\pi(r_o^2-r_i^2)\\)\", \n    \"$$A_{tube}=\\pi(r_o^2-r_i^2)$$\", \n    \"A_tube,r_o,r_i\",\n    \"$$A_{tube}=\\pi(r_o^2-r_i^2)$$\",\n    \"Eq(A_tube,pi*((r_o)**2-(r_i)**2))\"\n)\n\nITube = eqn(\n    \"Moment of Inertia of a Tube\",\n    \"\\(I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)\\)\",\n    \"$$I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)$$\",\n    \"I_tube,r_o,r_i\",\n    \"$$I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)$$\", \n    \"Eq(I_tube,pi/4*((r_o)**4-(r_i)**4))\" \n)\n\n\nstatics_eqnbank_inline = {\n    StaticsSumFx.name: StaticsSumFx.inline_math,\n    StaticsSumFy.name: StaticsSumFy.inline_math,\n    StaticsSumM.name: StaticsSumM.inline_math,\n}\ndeforms_eqnbank_inline = {\n    StressEqn.name: StressEqn.inline_math,\n    AxialDeform.name: AxialDeform.inline_math,\n    ThermalDeform.name: ThermalDeform.inline_math,\n}\n\ngeom_eqnbank_inline = {\n    AreaTube.name: AreaTube.inline_math,\n    ITube.name: ITube.inline_math,\n}\n\neqnbank_inline = {\n    StaticsSumFx.name: StaticsSumFx.inline_math,\n    StaticsSumFy.name: StaticsSumFy.inline_math,\n    StaticsSumM.name: StaticsSumM.inline_math,\n    StressEqn.name: StressEqn.inline_math,\n    AxialDeform.name: AxialDeform.inline_math,\n    ThermalDeform.name: ThermalDeform.inline_math,\n    AreaTube.name: AreaTube.inline_math,\n    ITube.name: ITube.inline_math,\n}\n\neqnbank_newline = {\n    StaticsSumFx.name: StaticsSumFx.newline_math,\n    StaticsSumFy.name: StaticsSumFy.newline_math,\n    StaticsSumM.name: StaticsSumM.newline_math,\n    StressEqn.name: StressEqn.newline_math,\n    AxialDeform.name: AxialDeform.newline_math,\n    ThermalDeform.name: ThermalDeform.newline_math,\n    AreaTube.name: AreaTube.newline_math,\n    ITube.name: ITube.newline_math,\n}\n\nworking_equations_solver=reactive.Value([])\nworking_symbols=reactive.Value([])\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.script(\n            src=\"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n        ),\n        ui.tags.script(\n            \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n        ),\n    ),\n    ui.panel_title(\"Interactive Problem Solving Environment\"),\n        ui.row(\n            ui.markdown(\"Your Equation Workspace\"),\n            ui.column(3,ui.output_ui(\"dyn_eqns\"),style='margin-bottom:30 px;border-right:1px solid;'),\n            ui.column(9,ui.output_ui(\"dyn_working_eqns\"),ui.output_text(\"txt\")),\n        ),\n        ui.row(ui.output_ui(\"ui_equation_bookkeeping\")),\n        #ui.row(ui.input_action_button(\n        #            \"solveEquations\", \"Solve Equations\", class_=\"btn-success\", width=\"240px\", style='margin-bottom:10px')\n        #      ),\n        ui.output_ui(\"ui_solutions\"),\n        ui.row(\n            ui.column(8,ui.output_ui(\"dyn_ui_nav\")),\n            ui.column(4,\n                ui.navset_tab_card(\n                    ui.nav_spacer(),\n                    ui.nav(\"Equation Bank\",\n                        ui.input_checkbox_group(\"selected_eqns\",\"Choose your equations:\",eqnbank_inline,\n                        ),\n                    ),\n                ),\n            ),\n        ),\n)\n\n\ndef server(input, output, session):\n   \n    @output\n    @render.ui\n    def dyn_eqns():\n        eqns_keys = input.selected_eqns()\n        req(eqns_keys)\n        lookup_eqns = [eqnbank_newline[key] for key in eqns_keys]\n        mystring_eqns = \"\".join(lookup_eqns)\n\n        return [\n            ui.markdown(mystring_eqns),\n            ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n            ),\n        ]\n\n    @output\n    @render.ui\n    def dyn_working_eqns():\n        eqns_keys = input.selected_eqns()\n        req(eqns_keys)\n        lookup_eqns = [eqnbank_newline[key] for key in eqns_keys]\n        \n\n        # Dynamic Filling of Force equations \n        if StaticsSumFy.newline_math in lookup_eqns:\n            StaticsSumFy_list = [\"F_y1\",\"F_y2\",\"F_y3\",\"F_y4\",\"F_y5\"]\n            StaticsSumFy_list = StaticsSumFy_list[:input.NumForcesY()]\n            StaticsSumFy.working_sym = \",\".join(StaticsSumFy_list)\n            StaticsSumFy.working_eqn_latex = \"$$\" + \"+\".join(StaticsSumFy_list) + \"=0$$\"\n            StaticsSumFy.working_eqn_solver = \"+\".join(StaticsSumFy_list)\n            \n            if str(input.F1y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y1\",str(input.F1y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y1\",str(input.F1y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y1\",str(input.F1y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y1\",\"\\\\boxed{F_{y_1}}\")\n        \n            if str(input.F2y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y2\",str(input.F2y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y2\",str(input.F2y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y2\",str(input.F2y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y2\",\"\\\\boxed{F_{y_2}}\")\n        \n            if str(input.F3y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y3\",str(input.F3y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y3\",str(input.F3y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y3\",str(input.F3y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y3\",\"\\\\boxed{F_{y_3}}\")\n        \n            if str(input.F4y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y4\",str(input.F4y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y4\",str(input.F4y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y4\",str(input.F4y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y4\",\"\\\\boxed{F_{y_4}}\")\n        \n            if str(input.F5y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y5\",str(input.F5y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y5\",str(input.F5y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y5\",str(input.F5y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y5\",\"\\\\boxed{F_{y_5}}\")\n                \n        # Dynamic Filling of Moment equations \n        if StaticsSumM.newline_math in lookup_eqns:\n            StaticsSumM_list = [\"M_1\",\"M_2\",\"M_3\",\"M_4\",\"M_5\"]\n            StaticsSumM_list = StaticsSumM_list[:input.NumMoments()]\n            StaticsSumM.working_sym = \",\".join(StaticsSumM_list)\n            StaticsSumM.working_eqn_latex = \"$$\" + \"+\".join(StaticsSumM_list) + \"=0$$\"\n            StaticsSumM.working_eqn_solver = \"+\".join(StaticsSumM_list)\n            \n            if str(input.M1()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_1\",str(input.M1()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_1\",str(input.M1()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_1\",str(input.M1()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_1\",\"\\\\boxed{M_1}\")\n        \n            if str(input.M2()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_2\",str(input.M2()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_2\",str(input.M2()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_2\",str(input.M2()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_2\",\"\\\\boxed{M_2}\")\n        \n            if str(input.M3()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_3\",str(input.M3()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_3\",str(input.M3()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_3\",str(input.M3()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_3\",\"\\\\boxed{M_3}\")\n        \n            if str(input.M4()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_4\",str(input.M4()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_4\",str(input.M4()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_4\",str(input.M4()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_4\",\"\\\\boxed{M_4}\")\n        \n            if str(input.M5()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_5\",str(input.M5()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_5\",str(input.M5()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_5\",str(input.M5()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_5\",\"\\\\boxed{M_5}\")\n          \n        \n        # Dynamic Filling of A equations \n        if AreaTube.newline_math in lookup_eqns:\n            AreaTube.working_eqn_latex = AreaTube.newline_math\n            AreaTube.working_eqn_solver = \"Eq(A_tube,pi*((r_o)**2-(r_i)**2))\"\n            AreaTube.working_sym = \"A_tube,r_o,r_i\"\n            \n            if str(input.A_tube()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"A_{tube}\",str(input.A_tube()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"A_tube\",str(input.A_tube()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"A_tube\",str(input.A_tube()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"A_{tube}\",\"\\\\boxed{A_{tube}}\")\n            if str(input.Ar_o()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_o\",str(input.Ar_o()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"r_o\",str(input.Ar_o()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"r_o\",str(input.Ar_o()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_o\",\"\\\\boxed{r_o}\")\n            if str(input.Ar_i()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_i\",str(input.Ar_i()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"r_i\",str(input.Ar_i()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"r_i\",str(input.Ar_i()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_i\",\"\\\\boxed{r_i}\")\n        \n        # Dynamic Filling of I equations \n        if ITube.newline_math in lookup_eqns:\n            ITube.working_eqn_latex = ITube.newline_math\n            ITube.working_eqn_solver = \"Eq(I_tube,pi/4*((r_o)**4-(r_i)**4))\"\n            ITube.working_sym = \"I_tube,r_o,r_i\"\n            if str(input.I_tube()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"I_{tube}\",str(input.I_tube()))\n                ITube.working_sym = ITube.working_sym.replace(\"I_tube\",str(input.I_tube()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"I_tube\",str(input.I_tube()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"I_{tube}\",\"\\\\boxed{I_{tube}}\")\n            if str(input.Ir_o()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_o\",str(input.Ir_o()))\n                ITube.working_sym = ITube.working_sym.replace(\"r_o\",str(input.Ir_o()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"r_o\",str(input.Ir_o()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_o\",\"\\\\boxed{r_o}\")\n            if str(input.Ir_i()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_i\",str(input.Ir_i()))        \n                ITube.working_sym = ITube.working_sym.replace(\"r_i\",str(input.Ir_i()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"r_i\",str(input.Ir_i()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_i\",\"\\\\boxed{r_i}\")\n            \n        # Dynamic Filling of Stress equation \n        if StressEqn.newline_math in lookup_eqns:\n            StressEqn.working_eqn_latex = StressEqn.newline_math\n            StressEqn.working_eqn_solver = \"Eq(sigma,(F)/(A))\"\n            StressEqn.working_sym = \"sigma,F,A\"\n        if str(input.sigma()) != \"\" : \n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"\\sigma\",str(input.sigma()))\n            StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"sigma\",str(input.sigma()))\n            StressEqn.working_sym = StressEqn.working_sym.replace(\"sigma\",str(input.sigma()))\n        else:\n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"\\sigma\",\"\\\\boxed\\sigma\")\n        if str(input.force()) != \"\" : \n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"F\",str(input.force()))\n            StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"F\",str(input.force()))\n            StressEqn.working_sym = StressEqn.working_sym.replace(\"F\",str(input.force()))\n        else:\n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"F\",\"\\\\boxed{F}\")\n        if str(input.area()) != \"\" : \n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"A\",str(input.area()))\n            StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"A\",str(input.area()))\n            StressEqn.working_sym = StressEqn.working_sym.replace(\"A\",str(input.area()))\n        else:\n            StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"A\",\"\\\\boxed{A}\")\n        \n        eqnbank_working_latex = {\n        StaticsSumFx.name: StaticsSumFx.working_eqn_latex,\n        StaticsSumFy.name: StaticsSumFy.working_eqn_latex,\n        StaticsSumM.name: StaticsSumM.working_eqn_latex,\n        StressEqn.name: StressEqn.working_eqn_latex,\n        AxialDeform.name: AxialDeform.working_eqn_latex,\n        ThermalDeform.name: ThermalDeform.working_eqn_latex,\n        AreaTube.name: AreaTube.working_eqn_latex,\n        ITube.name: ITube.working_eqn_latex,\n        }\n\n        eqnbank_working_solver = {\n        StaticsSumFx.name: StaticsSumFx.working_eqn_solver,\n        StaticsSumFy.name: StaticsSumFy.working_eqn_solver,\n        StaticsSumM.name: StaticsSumM.working_eqn_solver,\n        StressEqn.name: StressEqn.working_eqn_solver,\n        AxialDeform.name: AxialDeform.working_eqn_solver,\n        ThermalDeform.name: ThermalDeform.working_eqn_solver,\n        AreaTube.name: AreaTube.working_eqn_solver,\n        ITube.name: ITube.working_eqn_solver,\n        }\n\n        symbank_working = {\n        StaticsSumFx.name: StaticsSumFx.working_sym,\n        StaticsSumFy.name: StaticsSumFy.working_sym,\n        StaticsSumM.name: StaticsSumM.working_sym,\n        StressEqn.name: StressEqn.working_sym,\n        AxialDeform.name: AxialDeform.working_sym,\n        ThermalDeform.name: ThermalDeform.working_sym,\n        AreaTube.name: AreaTube.working_sym,\n        ITube.name: ITube.working_sym,\n        }\n        \n        working_eqns_latex = [eqnbank_working_latex[key] for key in eqns_keys]\n        working_eqns_solver = [eqnbank_working_solver[key] for key in eqns_keys]\n        working_syms = [symbank_working[key] for key in eqns_keys]\n        mystring_working_eqns = \"\".join(working_eqns_latex)\n        working_equations_solver.set(working_eqns_solver)\n\n        working_syms_only=[]\n        for j in working_syms:\n            temp=j.split(\",\")\n            for k in temp:\n                try: \n                    float(k)  \n                except:\n                    working_syms_only.append(k)\n        working_syms_only=list(dict.fromkeys(working_syms_only))\n        working_symbols.set(working_syms_only)\n        \n        return [\n            ui.markdown(mystring_working_eqns),\n            ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n            )\n        ]\n    \n    @output\n    @render.ui\n    def dyn_ui_nav():\n        \n        equations = ui.navset_tab_card(\n            ui.nav(\n                str(StaticsSumFy.inline_math),\n                ui.input_numeric(\"NumForcesY\",\"How many terms do you want?\",2,min=2,max=5),\n                ui.input_text(\"F1y\",\"\\(F_{y_1}=\\)\", placeholder=\"Please type in variable or value\"),\n                ui.input_text(\"F2y\",\"\\(F_{y_2}=\\)\", placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.NumForcesY&gt;=3\", ui.input_text(\"F3y\",\"\\(F_{y_3}=\\)\", placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesY&gt;=4\", ui.input_text(\"F4y\",\"\\(F_{y_4}=\\)\", placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesY&gt;=5\", ui.input_text(\"F5y\",\"\\(F_{y_5}=\\)\", placeholder=\"Please type in variable or value\"))\n                ),\n            ui.nav(\n                str(StaticsSumM.inline_math),\n                ui.input_numeric(\"NumMoments\",\"How many terms do you want?\",2,min=2,max=5),\n                ui.input_text(\"M1\",\"\\(M_1=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"M2\",\"\\(M_2=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.panel_conditional(\"input.NumMoments&gt;=3\", ui.input_text(\"M3\",\"\\(M_3=\\)\", placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumMoments&gt;=4\", ui.input_text(\"M4\",\"\\(M_4=\\)\", placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumMoments&gt;=5\", ui.input_text(\"M5\",\"\\(M_5=\\)\", placeholder=\"Please type in variable or value\"))\n                ),\n            ui.nav(\n                str(AreaTube.inline_math),\n                ui.input_text(\"A_tube\",\"\\(A_{tube}=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ar_o\",\"\\(r_o=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ar_i\",\"\\(r_i\\)\", placeholder=\"Please type in variables or values\")\n                ),\n            ui.nav(\n                str(ITube.inline_math),\n                ui.input_text(\"I_tube\",\"\\(I_{tube}=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ir_o\",\"\\(r_o=\\)\", placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ir_i\",\"\\(r_i\\)\", placeholder=\"Please type in variables or values\"),\n                ),\n            ui.nav(\n                str(StressEqn.inline_math),\n                ui.input_text(\"sigma\",\"\\(\\sigma\\)\", placeholder=\"Please type in variables or vaues\"),\n                ui.input_text(\"force\",\"\\(F\\)\", placeholder=\"Please type in variables or vaues\"),\n                ui.input_text(\"area\",\"\\(A\\)\", placeholder=\"Please type in variables or values\"),\n                )\n            )\n    \n        return [equations,\n               ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n        ),]\n\n    @output\n    @render.ui\n    def ui_equation_bookkeeping():\n        req(working_equations_solver())\n        num_working_equations=len(working_equations_solver())\n        num_working_symbols=len(working_symbols())\n        string_working_symbols= \",\".join(working_symbols())\n        return [ui.markdown(f\"Your equation-solver set up currently has **{num_working_equations} equations** and **{num_working_symbols} unknowns**. &lt;br&gt;  Your current unknowns are *{string_working_symbols}*\"), \n                ui.input_action_button(\n                    \"solveEquations\", \"Solve Equations\", class_=\"btn-success\", width=\"240px\", style='margin-bottom:10px'),\n                ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n                )]\n        \n    @output\n    @render.ui\n    @reactive.event(input.solveEquations)\n    def ui_solutions():\n        for j in working_symbols():\n            j=Symbol(j)\n        print(working_equations_solver())\n        print(working_symbols())\n        my_solver_equations=[]\n        for m in working_equations_solver():\n            m=parse_expr(m)\n        solve_eqns = solve(working_equations_solver(),working_symbols(),dict=True)\n        answers=[]\n        for k in working_symbols():\n            try: \n                temp=solve_eqns[0][parse_expr(k)]\n                temp2=\"$$\"+k+\"=\"+str(temp)+\"$$\"\n                answers.append(temp2)\n            except:\n                pass\n        mystring_answers=\"\".join(answers)\n        mystring_answers=mystring_answers.replace(\"pi\",\"\\pi\")\n        mystring_answers=mystring_answers.replace(\"delta\",\"\\delta\")\n        mystring_answers=mystring_answers.replace(\"delta\",\"\\Delta\")\n        mystring_answers=mystring_answers.replace(\"sigma\",\"\\sigma\")\n        return [ui.markdown(f\"Your solution is {mystring_answers}\"),\n                ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n                )]\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "workoutsolution.html#worked-out-solution",
    "href": "workoutsolution.html#worked-out-solution",
    "title": "2Â  Workout Example Solution",
    "section": "2.1 Worked Out Solution",
    "text": "2.1 Worked Out Solution\nThis demonstrates a worked out solution to the problem. The best way to begin is by drawing a free body diagram.\n\n\n\nFigure 3: Three traffic light installation with loads\n\n\nUse equilibrium equations to find the internal loads:\n\\[\n\\Sigma F_y=0: N-65-50-50=0\\\\\n\\] \\[N=165~lbs\n\\]\n\\[\n\\Sigma M_O=0: -M+(50\\times7)+(50\\times11)+(65\\times15)=0\n\\\\\\] \\[\nM=1875~lb\\cdot ft=22500~lb\\cdot in\n\\]\nNow, determine the cross-sectional properties:\n\\[\nA=\\pi(r_0^2-r_i^2)=\\pi(2.5^2-2.3^2)=3.02~in^2\n\\\\\nI=\n\\frac{\\pi}{4}\n(r_0^4-r_i^4)=\\frac{\\pi}{4}(2.5^4-2.3^4)=8.70~in^4\n\\]\nCalculate stress due to normal force:\n\\[\n\\sigma_n=\\frac{F}{A}=\\frac{-165~lbs}{3.02~in^2}=-54.7~psi\n\\]\nCalculate maximum stress due to bending moment (will have same magnitude in both tension and compression):\n\\[\n\\sigma_m=\\pm\\frac{M_c}{I}=\\pm\\frac{22500\\times2.5}{8.70}=\\pm6460~psi\n\\]\nDetermine combined tensile stress: \\(\\sigma_T=-54.7+6460=6410~psi\\)\nDetermine combined compressive stress: \\(\\sigma_T=-54.7-6460=-6520~psi\\)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3Â  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  }
]