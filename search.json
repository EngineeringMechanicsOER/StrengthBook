[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "deformsbook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "workoutproblem.html",
    "href": "workoutproblem.html",
    "title": "1Â  Strength of Materials Problem Workout",
    "section": "",
    "text": "To scaffold your learning in this example, we have provided a free body diagram for you and a repeat of the problem statement.\nA city planner is installing a new traffic light. Light A weighs 65 lb, while lights B and C weigh 50 lb each. The post at O has a hollow circular cross-section with an outer diameter of 5 inches and a wall thickness of 0.2 inches. Please calculate the magnitude of the maximum combined stress in the post. You may ignore the weight of the post.\n\n\n\nFigure 1: Three traffic light installation with loads\n\n\nPlease work through the problem step by step showing your math in the interactive interface here.\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\n\n\nfrom shiny import App, render, ui, reactive, req\nfrom sympy import solve, Eq, Symbol\nfrom sympy.parsing.sympy_parser import parse_expr\nfrom shiny.ui import h4\n\n# load equations lists\n\n\nclass eqn:\n    def __init__(self, name, inline_math, newline_math, working_sym, working_eqn_latex,working_eqn_solver):\n        self.name = name\n        self.inline_math = inline_math\n        self.newline_math = newline_math\n        self.working_sym = working_sym\n        self.working_eqn_latex = working_eqn_latex\n        self.working_eqn_solver = working_eqn_solver\n\nStaticsSumFx = eqn(\n    \"Equilibrium Forces in X\", \n    \"\\(\\Sigma F_x=0\\)\", \n    \"$$\\Sigma F_x=0$$\", \n    \"SigmaFx\",\n    \"$$F_x1+F_x2+F_x3+F_x4+F_x5=0$$\",\n    \"F_x1+F_x2+F_x3+F_x4+F_x5=0\"\n)\n\nStaticsSumFy = eqn(\n    \"Equilibrium Forces in Y\", \n    \"\\(\\Sigma F_y=0\\)\", \n    \"$$\\Sigma F_y=0$$\", \n    \"SigmaFy\",\n    \"$$F_y1+F_y2+F_y3+F_y4+F_y5=0$$\",\n    \"F_y1+F_y2+F_y3+F_y4+F_y5=0\"\n)\n\nStaticsSumM = eqn(\n    \"Equilibrium Moments about O\", \n    \"\\(\\Sigma M_O=0\\)\", \n    \"$$\\Sigma M_O=0$$\", \n    \"SigmaM\",\n    \"$$M_1+M_2+M_3+M_4+M_5=0$$\",\n    \"M_1+M_2+M_3+M_4+M_5=0\"\n)\n\nStressEqn = eqn(\n    \"Stress Equation\", \n    \"\\(\\sigma=\\\\frac{F}{A}\\)\", \n    \"$$\\sigma=\\\\frac{F}{A}$$\", \n    \"sigma,F,A\",\n    \"$$\\sigma=\\\\frac{(F)}{(A)}$$\",\n    \"Eq(sigma,(F)/(A))\"\n)\n\nAxialDeform = eqn(\n    \"Axial Deformation by Force\",\n    \"\\(\\delta_l=\\\\frac{P L}{AE}\\)\",\n    \"$$\\delta_l=\\\\frac{P\\cdot L}{A \\cdot E}$$\",\n    \"delta_l,P,L,A,E\",\n    \"$$\\delta_l=\\\\frac{(P)(L)}{(A)(E)}$$\",\n    \"Eq(delta_l,(P)*(L)/(A)/(E))\"\n)\n\nThermalDeform = eqn(\n    \"Axial Deformation by Thermal\",\n    \"\\(\\delta_t= \\\\alpha \\Delta T L\\)\",\n    \"$$\\delta_t= \\\\alpha \\cdot \\Delta T \\cdot L$$\",\n    \"delta_t,alpha,DeltaT,L\",\n    \"$$\\delta_t= \\\\alpha \\Delta T L$$\",\n    \"delta_t= alpha*(Delta_T)*L\"\n)\n\nAreaTube = eqn(\n    \"Area of a Tube\", \n    \"\\(A_{tube}=\\pi(r_o^2-r_i^2)\\)\", \n    \"$$A_{tube}=\\pi(r_o^2-r_i^2)$$\", \n    \"A_tube,r_o,r_i\",\n    \"$$A_{tube}=\\pi(r_o^2-r_i^2)$$\",\n    \"Eq(A_tube,pi*((r_o)**2-(r_i)**2))\"\n)\n\nITube = eqn(\n    \"Moment of Inertia of a Tube\",\n    \"\\(I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)\\)\",\n    \"$$I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)$$\",\n    \"I_tube,r_o,r_i\",\n    \"$$I_{tube}=\\\\frac{\\pi}{4}(r_o^4-r_i^4)$$\", \n    \"Eq(I_tube,pi/4*((r_o)**4-(r_i)**4))\" \n)\n\nBendingStress = eqn(\n    \"Bending Stress from a Moment\",\n    \"\\(\\sigma_b=\\\\frac{M*y}{I}\\)\",\n    \"$$\\sigma_b=\\\\frac{M*y}{I}$$\",\n    \"sigma_b,M,y,I,\",\n    \"$$\\sigma_b=\\\\frac{M*y}{I}$$\", \n    \"Eq(sigma_b,M*y/I))\" \n)\n\nCompatability1 = eqn(\n    \"Compatability Equation 1\",\n    \"\\(a_1+\\ldots=b_1+b_2+\\ldots\\)\", \n    \"$$a_1+\\ldots=b_1+b_2+\\ldots$$\", \n    \"\",\n    \"$$a_1+a_n=b_1+b_n$$\",\n    \"Eq(a_1+a_n=b_1+b_n)\" \n)\n\nCompatability2 = eqn(\n    \"Compatability Equation 2\",\n    \"\\(c_1+\\ldots=d_1+d_2+\\ldots\\)\", \n    \"$$c_1+\\ldots=d_1+d_2+\\ldots$$\", \n    \"\",\n    \"$$c_1+c_n=d_1+d_n$$\",\n    \"Eq(c_1+c_n=d_1+d_n)\" \n)\n\n\nstatics_eqnbank_inline = {\n    StaticsSumFx.name: StaticsSumFx.inline_math,\n    StaticsSumFy.name: StaticsSumFy.inline_math,\n    StaticsSumM.name: StaticsSumM.inline_math,\n}\ndeforms_eqnbank_inline = {\n    StressEqn.name: StressEqn.inline_math,\n    AxialDeform.name: AxialDeform.inline_math,\n    ThermalDeform.name: ThermalDeform.inline_math,\n}\n\ngeom_eqnbank_inline = {\n    AreaTube.name: AreaTube.inline_math,\n    ITube.name: ITube.inline_math,\n}\n\neqnbank_inline = {\n    StaticsSumFx.name: StaticsSumFx.inline_math,\n    StaticsSumFy.name: StaticsSumFy.inline_math,\n    StaticsSumM.name: StaticsSumM.inline_math,\n    StressEqn.name: StressEqn.inline_math,\n    BendingStress.name: BendingStress.inline_math,\n    AxialDeform.name: AxialDeform.inline_math,\n    ThermalDeform.name: ThermalDeform.inline_math,\n    AreaTube.name: AreaTube.inline_math,\n    ITube.name: ITube.inline_math,\n    Compatability1.name: Compatability1.inline_math,\n    Compatability2.name: Compatability2.inline_math,\n}\n\neqnbank_newline = {\n    StaticsSumFx.name: StaticsSumFx.newline_math,\n    StaticsSumFy.name: StaticsSumFy.newline_math,\n    StaticsSumM.name: StaticsSumM.newline_math,\n    StressEqn.name: StressEqn.newline_math,\n    BendingStress.name: BendingStress.newline_math,\n    AxialDeform.name: AxialDeform.newline_math,\n    ThermalDeform.name: ThermalDeform.newline_math,\n    AreaTube.name: AreaTube.newline_math,\n    ITube.name: ITube.newline_math,\n    Compatability1.name: Compatability1.newline_math,\n    Compatability2.name: Compatability2.newline_math,\n}\n\n\n\nworking_equations_solver=reactive.Value([])\nworking_equations_latex_render=reactive.Value([])\nworking_symbols=reactive.Value([])\n\nfeedback_equations=reactive.Value([])\nfeedback_solns=reactive.Value([])\nfeedback_syms=reactive.Value([])\n\nworking_SumFx_render=reactive.Value(\"\")\nworking_SumFy_render=reactive.Value(\"\")\nworking_SumM_render=reactive.Value(\"\")\nworking_StressEqn_render=reactive.Value(\"\")\nworking_BendingStress_render=reactive.Value(\"\")\nworking_AxialDeform_render=reactive.Value(\"\")\nworking_ThermalDeform_render=reactive.Value(\"\")\nworking_AreaTube_render=reactive.Value(\"\")\nworking_Itube_render=reactive.Value(\"\")\nworking_Compatability1_render=reactive.Value(\"\")\nworking_Compatability2_render=reactive.Value(\"\")\n\nworking_SumFx_string=reactive.Value(\"\")\nworking_SumFy_string=reactive.Value(\"\")\nworking_SumM_string=reactive.Value(\"\")\nworking_StressEqn_string=reactive.Value(\"\")\nworking_BendingStress_string=reactive.Value(\"\")\nworking_AxialDeform_string=reactive.Value(\"\")\nworking_ThermalDeform_string=reactive.Value(\"\")\nworking_AreaTube_string=reactive.Value(\"\")\nworking_Itube_string=reactive.Value(\"\")\nworking_Compatability1_string=reactive.Value(\"\")\nworking_Compatability2_string=reactive.Value(\"\")\n\nNumForcesY=reactive.Value(2)\nF1y=reactive.Value(\"\")\nF2y=reactive.Value(\"\")\nF3y=reactive.Value(\"\")\nF4y=reactive.Value(\"\")\nF5y=reactive.Value(\"\")\nEquil_latex=reactive.Value(\"\")\n\nNumForcesX=reactive.Value(2)\nF1x=reactive.Value(\"\")\nF2x=reactive.Value(\"\")\nF3x=reactive.Value(\"\")\nF4x=reactive.Value(\"\")\nF5x=reactive.Value(\"\")\n\nNumMoments=reactive.Value(2)\nM1=reactive.Value(\"\")\nM2=reactive.Value(\"\")\nM3=reactive.Value(\"\")\nM4=reactive.Value(\"\")\nM5=reactive.Value(\"\")\n\naxial_stress_sigma=reactive.Value(\"\")\naxial_stress_force=reactive.Value(\"\")\naxial_stress_area=reactive.Value(\"\")\n\nbending_stress_sigma=reactive.Value(\"\")\nbending_stress_M=reactive.Value(\"\")\nbending_stress_y=reactive.Value(\"\")\nbending_stress_I=reactive.Value(\"\")\n\naxial_delta_l=reactive.Value(\"\")\naxial_P=reactive.Value(\"\")\naxial_L=reactive.Value(\"\")\naxial_A=reactive.Value(\"\")\naxial_E=reactive.Value(\"\")\n\nthermal_delta_t=reactive.Value(\"\")\nthermal_alpha=reactive.Value(\"\")\nthermal_Delta_T=reactive.Value(\"\")\nthermal_L=reactive.Value(\"\")\n\narea_tube_A_tube=reactive.Value(\"\")\narea_tube_Ar_o=reactive.Value(\"\")\narea_tube_Ar_i=reactive.Value(\"\")\n\nI_tube_I_tube=reactive.Value(\"\")\nI_tube_Ir_o=reactive.Value(\"\")\ni_tube_Ir_i=reactive.Value(\"\")\n\nCompatability1_NumLHS=reactive.Value(1)\nCompatability1_NumRHS=reactive.Value(2)\nCompatability1_a_1=reactive.Value(\"\")\nCompatability1_a_2=reactive.Value(\"\")\nCompatability1_a_3=reactive.Value(\"\")\nCompatability1_a_4=reactive.Value(\"\")\nCompatability1_a_5=reactive.Value(\"\")\nCompatability1_b_1=reactive.Value(\"\")\nCompatability1_b_2=reactive.Value(\"\")\nCompatability1_b_3=reactive.Value(\"\")\nCompatability1_b_4=reactive.Value(\"\")\nCompatability1_b_5=reactive.Value(\"\")\n\nCompatability2_NumLHS=reactive.Value(1)\nCompatability2_NumRHS=reactive.Value(2)\nCompatability2_c_1=reactive.Value(\"\")\nCompatability2_c_2=reactive.Value(\"\")\nCompatability2_c_3=reactive.Value(\"\")\nCompatability2_c_4=reactive.Value(\"\")\nCompatability2_c_5=reactive.Value(\"\")\nCompatability2_d_1=reactive.Value(\"\")\nCompatability2_d_2=reactive.Value(\"\")\nCompatability2_d_3=reactive.Value(\"\")\nCompatability2_d_4=reactive.Value(\"\")\nCompatability2_d_5=reactive.Value(\"\")\n\nactive_eqn_tab=reactive.Value(\"Instructions\")\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.script(\n            src=\"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n        ),\n        ui.tags.script(\n            \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n        ),\n    ),\n    ui.panel_title(\"Interactive Problem Solving Environment\"),\n        ui.row(\n            ui.markdown(\"Your Equation Workspace\"),\n            ui.column(3,ui.output_ui(\"dyn_eqns\"),style='margin-bottom:30 px;border-right:1px solid;'),\n            ui.column(9,ui.output_ui(\"dyn_working_eqns\"),ui.output_text(\"txt\")),\n        ),\n        ui.row(ui.output_ui(\"ui_equation_bookkeeping\")),\n        #ui.row(ui.input_action_button(\n        #            \"solveEquations\", \"Solve Equations\", class_=\"btn-success\", width=\"240px\", style='margin-bottom:10px')\n        #      ),\n        ui.output_ui(\"ui_solutions\"),\n        ui.row(\n            ui.column(8,ui.output_ui(\"dyn_ui_nav\")),\n            ui.column(4,\n                ui.navset_tab_card(\n                    ui.nav(\"Equation Bank\",\n                        ui.input_checkbox_group(\"selected_eqns\",\"Choose your equations:\",eqnbank_inline,\n                        ),\n                    ),\n                ),\n            ),\n        ),\n)\n\n\ndef server(input, output, session):\n   \n    @output\n    @render.ui\n    def dyn_eqns():\n        eqns_keys = input.selected_eqns()\n        req(eqns_keys)\n        lookup_eqns = [eqnbank_newline[key] for key in eqns_keys]\n        mystring_eqns = \"\".join(lookup_eqns)\n        feedback_equations.set(lookup_eqns)\n\n        return [\n            ui.markdown(mystring_eqns),\n            ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n            ),\n        ]\n\n    @output\n    @render.ui\n    def dyn_working_eqns():\n        eqns_keys = input.selected_eqns()\n        req(eqns_keys)\n        lookup_eqns = [eqnbank_newline[key] for key in eqns_keys]\n        \n\n        # Dynamic Filling of Force equations \n        if StaticsSumFy.newline_math in lookup_eqns:\n            StaticsSumFy_list = [\"F_y1\",\"F_y2\",\"F_y3\",\"F_y4\",\"F_y5\"]\n            StaticsSumFy_list = StaticsSumFy_list[:input.NumForcesY()]\n            StaticsSumFy.working_sym = \",\".join(StaticsSumFy_list)\n            StaticsSumFy.working_eqn_latex = \"$$\" + \"+\".join(StaticsSumFy_list) + \"=0$$\"\n            StaticsSumFy.working_eqn_solver = \"+\".join(StaticsSumFy_list)\n            \n            if str(input.F1y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y1\",str(input.F1y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y1\",str(input.F1y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y1\",str(input.F1y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y1\",\"\\\\boxed{F_{y_1}}\")\n        \n            if str(input.F2y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y2\",str(input.F2y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y2\",str(input.F2y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y2\",str(input.F2y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y2\",\"\\\\boxed{F_{y_2}}\")\n        \n            if str(input.F3y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y3\",str(input.F3y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y3\",str(input.F3y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y3\",str(input.F3y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y3\",\"\\\\boxed{F_{y_3}}\")\n        \n            if str(input.F4y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y4\",str(input.F4y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y4\",str(input.F4y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y4\",str(input.F4y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y4\",\"\\\\boxed{F_{y_4}}\")\n        \n            if str(input.F5y()) != \"\" : \n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y5\",str(input.F5y()))\n                StaticsSumFy.working_sym = StaticsSumFy.working_sym.replace(\"F_y5\",str(input.F5y()))\n                StaticsSumFy.working_eqn_solver = StaticsSumFy.working_eqn_solver.replace(\"F_y5\",str(input.F5y()))\n            else:\n                StaticsSumFy.working_eqn_latex = StaticsSumFy.working_eqn_latex.replace(\"F_y5\",\"\\\\boxed{F_{y_5}}\")\n      \n  # Dynamic Filling of Force equations \n        if StaticsSumFx.newline_math in lookup_eqns:\n            StaticsSumFx_list = [\"F_x1\",\"F_x2\",\"F_x3\",\"F_x4\",\"F_x5\"]\n            StaticsSumFx_list = StaticsSumFx_list[:input.NumForcesX()]\n            StaticsSumFx.working_sym = \",\".join(StaticsSumFx_list)\n            StaticsSumFx.working_eqn_latex = \"$$\" + \"+\".join(StaticsSumFx_list) + \"=0$$\"\n            StaticsSumFx.working_eqn_solver = \"+\".join(StaticsSumFx_list)\n            \n            if str(input.F1x()) != \"\" : \n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x1\",str(input.F1x()))\n                StaticsSumFx.working_sym = StaticsSumFx.working_sym.replace(\"F_x1\",str(input.F1x()))\n                StaticsSumFx.working_eqn_solver = StaticsSumFx.working_eqn_solver.replace(\"F_x1\",str(input.F1x()))\n            else:\n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x1\",\"\\\\boxed{F_{x_1}}\")\n        \n            if str(input.F2x()) != \"\" : \n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x2\",str(input.F2x()))\n                StaticsSumFx.working_sym = StaticsSumFx.working_sym.replace(\"F_x2\",str(input.F2x()))\n                StaticsSumFx.working_eqn_solver = StaticsSumFx.working_eqn_solver.replace(\"F_x2\",str(input.F2x()))\n            else:\n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x2\",\"\\\\boxed{F_{x_2}}\")\n        \n            if str(input.F3x()) != \"\" : \n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x3\",str(input.F3x()))\n                StaticsSumFx.working_sym = StaticsSumFx.working_sym.replace(\"F_x3\",str(input.F3x()))\n                StaticsSumFx.working_eqn_solver = StaticsSumFx.working_eqn_solver.replace(\"F_x3\",str(input.F3x()))\n            else:\n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x3\",\"\\\\boxed{F_{x_3}}\")\n        \n            if str(input.F4x()) != \"\" : \n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x4\",str(input.F4x()))\n                StaticsSumFx.working_sym = StaticsSumFx.working_sym.replace(\"F_x4\",str(input.F4x()))\n                StaticsSumFx.working_eqn_solver = StaticsSumFx.working_eqn_solver.replace(\"F_x4\",str(input.F4x()))\n            else:\n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x4\",\"\\\\boxed{F_{x_4}}\")\n        \n            if str(input.F5x()) != \"\" : \n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x5\",str(input.F5x()))\n                StaticsSumFx.working_sym = StaticsSumFx.working_sym.replace(\"F_x5\",str(input.F5x()))\n                StaticsSumFx.working_eqn_solver = StaticsSumFx.working_eqn_solver.replace(\"F_x5\",str(input.F5x()))\n            else:\n                StaticsSumFx.working_eqn_latex = StaticsSumFx.working_eqn_latex.replace(\"F_x5\",\"\\\\boxed{F_{x_5}}\")\n                \n                \n        # Dynamic Filling of Moment equations \n        if StaticsSumM.newline_math in lookup_eqns:\n            StaticsSumM_list = [\"M_1\",\"M_2\",\"M_3\",\"M_4\",\"M_5\"]\n            StaticsSumM_list = StaticsSumM_list[:input.NumMoments()]\n            StaticsSumM.working_sym = \",\".join(StaticsSumM_list)\n            StaticsSumM.working_eqn_latex = \"$$\" + \"+\".join(StaticsSumM_list) + \"=0$$\"\n            StaticsSumM.working_eqn_solver = \"+\".join(StaticsSumM_list)\n            \n            if str(input.M1()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_1\",str(input.M1()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_1\",str(input.M1()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_1\",str(input.M1()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_1\",\"\\\\boxed{M_1}\")\n        \n            if str(input.M2()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_2\",str(input.M2()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_2\",str(input.M2()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_2\",str(input.M2()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_2\",\"\\\\boxed{M_2}\")\n        \n            if str(input.M3()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_3\",str(input.M3()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_3\",str(input.M3()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_3\",str(input.M3()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_3\",\"\\\\boxed{M_3}\")\n        \n            if str(input.M4()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_4\",str(input.M4()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_4\",str(input.M4()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_4\",str(input.M4()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_4\",\"\\\\boxed{M_4}\")\n        \n            if str(input.M5()) != \"\" : \n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_5\",str(input.M5()))\n                StaticsSumM.working_sym = StaticsSumM.working_sym.replace(\"M_5\",str(input.M5()))\n                StaticsSumM.working_eqn_solver = StaticsSumM.working_eqn_solver.replace(\"M_5\",str(input.M5()))\n            else:\n                StaticsSumM.working_eqn_latex = StaticsSumM.working_eqn_latex.replace(\"M_5\",\"\\\\boxed{M_5}\")\n          \n        \n        # Dynamic Filling of A equations \n        if AreaTube.newline_math in lookup_eqns:\n            AreaTube.working_eqn_latex = AreaTube.newline_math\n            AreaTube.working_eqn_solver = \"Eq(A_tube,pi*((r_o)**2-(r_i)**2))\"\n            AreaTube.working_sym = \"A_tube,r_o,r_i\"\n            \n            if str(input.A_tube()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"A_{tube}\",str(input.A_tube()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"A_tube\",str(input.A_tube()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"A_tube\",str(input.A_tube()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"A_{tube}\",\"\\\\boxed{A_{tube}}\")\n            if str(input.Ar_o()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_o\",str(input.Ar_o()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"r_o\",str(input.Ar_o()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"r_o\",str(input.Ar_o()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_o\",\"\\\\boxed{r_o}\")\n            if str(input.Ar_i()) != \"\" : \n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_i\",str(input.Ar_i()))\n                AreaTube.working_sym = AreaTube.working_sym.replace(\"r_i\",str(input.Ar_i()))\n                AreaTube.working_eqn_solver = AreaTube.working_eqn_solver.replace(\"r_i\",str(input.Ar_i()))\n            else:\n                AreaTube.working_eqn_latex = AreaTube.working_eqn_latex.replace(\"r_i\",\"\\\\boxed{r_i}\")\n        \n        # Dynamic Filling of I equations \n        if ITube.newline_math in lookup_eqns:\n            ITube.working_eqn_latex = ITube.newline_math\n            ITube.working_eqn_solver = \"Eq(I_tube,pi/4*((r_o)**4-(r_i)**4))\"\n            ITube.working_sym = \"I_tube,r_o,r_i\"\n            if str(input.I_tube()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"I_{tube}\",str(input.I_tube()))\n                ITube.working_sym = ITube.working_sym.replace(\"I_tube\",str(input.I_tube()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"I_tube\",str(input.I_tube()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"I_{tube}\",\"\\\\boxed{I_{tube}}\")\n            if str(input.Ir_o()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_o\",str(input.Ir_o()))\n                ITube.working_sym = ITube.working_sym.replace(\"r_o\",str(input.Ir_o()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"r_o\",str(input.Ir_o()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_o\",\"\\\\boxed{r_o}\")\n            if str(input.Ir_i()) != \"\" : \n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_i\",str(input.Ir_i()))        \n                ITube.working_sym = ITube.working_sym.replace(\"r_i\",str(input.Ir_i()))\n                ITube.working_eqn_solver = ITube.working_eqn_solver.replace(\"r_i\",str(input.Ir_i()))\n            else:\n                ITube.working_eqn_latex = ITube.working_eqn_latex.replace(\"r_i\",\"\\\\boxed{r_i}\")\n            \n        # Dynamic Filling of Stress equation \n        if StressEqn.newline_math in lookup_eqns:\n            StressEqn.working_eqn_latex = StressEqn.newline_math\n            StressEqn.working_eqn_solver = \"Eq(sigma,(F)/(A))\"\n            StressEqn.working_sym = \"sigma,F,A\"\n            if str(input.sigma()) != \"\" : \n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"\\sigma\",str(input.sigma()))\n                StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"sigma\",str(input.sigma()))\n                StressEqn.working_sym = StressEqn.working_sym.replace(\"sigma\",str(input.sigma()))\n            else:\n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"\\sigma\",\"\\\\boxed\\sigma\")\n            if str(input.force()) != \"\" : \n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"F\",str(input.force()))\n                StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"F\",str(input.force()))\n                StressEqn.working_sym = StressEqn.working_sym.replace(\"F\",str(input.force()))\n            else:\n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"F\",\"\\\\boxed{F}\")\n            if str(input.area()) != \"\" : \n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"A\",str(input.area()))\n                StressEqn.working_eqn_solver = StressEqn.working_eqn_solver.replace(\"A\",str(input.area()))\n                StressEqn.working_sym = StressEqn.working_sym.replace(\"A\",str(input.area()))\n            else:\n                StressEqn.working_eqn_latex = StressEqn.working_eqn_latex.replace(\"A\",\"\\\\boxed{A}\")\n           \n\n        # Dynamic Filling of Bending Stress equation \n        if BendingStress.newline_math in lookup_eqns:\n            BendingStress.working_eqn_latex = BendingStress.newline_math\n            BendingStress.working_eqn_solver = \"Eq(sigma_b,M*y/I)\"\n            BendingStress.working_sym = \"sigma_b,M,y,I\"\n            if str(input.bendingstress_sigma_b()) != \"\" : \n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"\\sigma_b\",str(input.bendingstress_sigma_b()))\n                BendingStress.working_eqn_solver = BendingStress.working_eqn_solver.replace(\"sigma_b\",str(input.bendingstress_sigma_b()))\n                BendingStress.working_sym = BendingStress.working_sym.replace(\"sigma_b\",str(input.bendingstress_sigma_b()))\n            else:\n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"\\sigma_b\",\"\\\\boxed{\\sigma_b}\")\n            if str(input.bendingstress_M()) != \"\" : \n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"M\",str(input.bendingstress_M()))\n                BendingStress.working_eqn_solver = BendingStress.working_eqn_solver.replace(\"M\",str(input.bendingstress_M()))\n                BendingStress.working_sym = BendingStress.working_sym.replace(\"M\",str(input.bendingstress_M()))\n            else:\n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"M\",\"\\\\boxed{M}\")\n            if str(input.bendingstress_y()) != \"\" : \n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"y\",str(input.bendingstress_y()))\n                BendingStress.working_eqn_solver = BendingStress.working_eqn_solver.replace(\"y\",str(input.bendingstress_y()))\n                BendingStress.working_sym = BendingStress.working_sym.replace(\"y\",str(input.bendingstress_y()))\n            else:\n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"y\",\"\\\\boxed{y}\")\n            if str(input.bendingstress_I()) != \"\" : \n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"I\",str(input.bendingstress_I()))\n                BendingStress.working_eqn_solver = BendingStress.working_eqn_solver.replace(\"I\",str(input.bendingstress_I()))\n                BendingStress.working_sym = BendingStress.working_sym.replace(\"I\",str(input.bendingstress_I()))\n            else:\n                BendingStress.working_eqn_latex = BendingStress.working_eqn_latex.replace(\"I\",\"\\\\boxed{I}\")\n            \n                \n        # Dynamic Filling of Axial Deform equation \n        if AxialDeform.newline_math in lookup_eqns:\n            AxialDeform.working_eqn_latex = AxialDeform.newline_math\n            AxialDeform.working_eqn_solver = \"Eq(delta_l,P*L/A/E)\"\n            AxialDeform.working_sym = \"delta_l,P,L,A,E\"\n            if str(input.axial_delta_l()) != \"\" : \n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"\\delta_l\",str(input.axial_delta_l()))\n                AxialDeform.working_eqn_solver = AxialDeform.working_eqn_solver.replace(\"delta_l\",str(input.axial_delta_l()))\n                AxialDeform.working_sym = AxialDeform.working_sym.replace(\"delta_l\",str(input.axial_delta_l()))\n            else:\n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"\\delta_l\",\"\\\\boxed{\\delta_l}\")\n            if str(input.axial_P()) != \"\" : \n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"P\",str(input.axial_P()))\n                AxialDeform.working_eqn_solver = AxialDeform.working_eqn_solver.replace(\"P\",str(input.axial_P()))\n                AxialDeform.working_sym = AxialDeform.working_sym.replace(\"P\",str(input.axial_P()))\n            else:\n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"P\",\"\\\\boxed{P}\")\n            if str(input.axial_L()) != \"\" : \n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"L\",str(input.axial_L()))\n                AxialDeform.working_eqn_solver = AxialDeform.working_eqn_solver.replace(\"L\",str(input.axial_L()))\n                AxialDeform.working_sym = AxialDeform.working_sym.replace(\"L\",str(input.axial_L()))\n            else:\n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"L\",\"\\\\boxed{L}\")\n            if str(input.axial_A()) != \"\" : \n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"A\",str(input.axial_A()))\n                AxialDeform.working_eqn_solver = AxialDeform.working_eqn_solver.replace(\"A\",str(input.axial_A()))\n                AxialDeform.working_sym = AxialDeform.working_sym.replace(\"A\",str(input.axial_A()))\n            else:\n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"A\",\"\\\\boxed{A}\")\n            if str(input.axial_E()) != \"\" : \n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"E\",str(input.axial_E()))\n                AxialDeform.working_eqn_solver = AxialDeform.working_eqn_solver.replace(\"E\",str(input.axial_E()))\n                AxialDeform.working_sym = AxialDeform.working_sym.replace(\"E\",str(input.axial_E()))\n            else:\n                AxialDeform.working_eqn_latex = AxialDeform.working_eqn_latex.replace(\"E\",\"\\\\boxed{E}\")\n            \n        # Dynamic Filling of Thermal Deform equation \n        if ThermalDeform.newline_math in lookup_eqns:\n            ThermalDeform.working_eqn_latex = ThermalDeform.newline_math\n            ThermalDeform.working_eqn_solver = \"Eq(delta_t,alpha*Delta_T*L)\"\n            ThermalDeform.working_sym = \"delta_t,Delta_T,alpha,L\"\n            if str(input.thermal_delta_t()) != \"\" : \n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\delta_t\",str(input.thermal_delta_t()))\n                ThermalDeform.working_eqn_solver = ThermalDeform.working_eqn_solver.replace(\"delta_t\",str(input.thermal_delta_t()))\n                ThermalDeform.working_sym = ThermalDeform.working_sym.replace(\"delta_t\",str(input.thermal_delta_t()))\n            else:\n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\delta_t\",\"\\\\boxed{\\delta_t}\")\n            if str(input.thermal_alpha()) != \"\" : \n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\\\alpha\",str(input.thermal_alpha()))\n                ThermalDeform.working_eqn_solver = ThermalDeform.working_eqn_solver.replace(\"alpha\",str(input.thermal_alpha()))\n                ThermalDeform.working_sym = ThermalDeform.working_sym.replace(\"alpha\",str(input.thermal_alpha()))\n            else:\n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\\\alpha\",\"\\\\boxed{\\\\alpha}\")\n            if str(input.thermal_Delta_T()) != \"\" : \n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\Delta T\",str(input.thermal_Delta_T()))\n                ThermalDeform.working_eqn_solver = ThermalDeform.working_eqn_solver.replace(\"Delta_T\",str(input.thermal_Delta_T()))\n                ThermalDeform.working_sym = ThermalDeform.working_sym.replace(\"Delta_T\",str(input.thermal_Delta_T()))\n            else:\n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"\\Delta T\",\"\\\\boxed{\\Delta T}\")\n            if str(input.thermal_L()) != \"\" : \n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"L\",str(input.thermal_L()))\n                ThermalDeform.working_eqn_solver = ThermalDeform.working_eqn_solver.replace(\"L\",str(input.thermal_L()))\n                ThermalDeform.working_sym = ThermalDeform.working_sym.replace(\"L\",str(input.thermal_L()))\n            else:\n                ThermalDeform.working_eqn_latex = ThermalDeform.working_eqn_latex.replace(\"L\",\"\\\\boxed L\")\n        \n        \n        # Dynamic Filling of Compatability equation 1 \n        if Compatability1.newline_math in lookup_eqns:\n            Compatability1_list__LHS = [\"a_1\",\"a_2\",\"a_3\",\"a_4\",\"a_5\"]\n            Compatability1_list__RHS = [\"b_1\",\"b_2\",\"b_3\",\"b_4\",\"b_5\"]\n            Compatability1_list_LHS = Compatability1_list__LHS[:input.Compatability1_NumLHS()]\n            Compatability1_list_RHS = Compatability1_list__RHS[:input.Compatability1_NumRHS()]\n            Compatability1_list = Compatability1_list_LHS + Compatability1_list_RHS\n            Compatability1.working_sym = \",\".join(Compatability1_list)\n            Compatability1.working_eqn_latex = \"$$\" + \"+\".join(Compatability1_list_LHS) + \"=\" + \"+\".join(Compatability1_list_RHS)+\"$$\"\n            Compatability1.working_eqn_solver = \"Eq(\"+ \"+\".join(Compatability1_list_LHS) + \",\" + \"+\".join(Compatability1_list_RHS)+\")\"\n            \n            if str(input.a_1()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_1\",str(input.a_1()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"a_1\",str(input.a_1()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"a_1\",str(input.a_1()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_1\",\"\\\\boxed{a_1}\")\n            \n            if str(input.a_2()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_2\",str(input.a_2()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"a_2\",str(input.a_2()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"a_2\",str(input.a_2()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_2\",\"\\\\boxed{a_2}\")\n            \n            if str(input.a_3()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_3\",str(input.a_3()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"a_3\",str(input.a_3()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"a_3\",str(input.a_3()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_3\",\"\\\\boxed{a_3}\")\n            \n            if str(input.a_4()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_4\",str(input.a_4()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"a_4\",str(input.a_4()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"a_4\",str(input.a_4()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_4\",\"\\\\boxed{a_4}\")\n            \n            if str(input.a_5()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_5\",str(input.a_5()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"a_5\",str(input.a_5()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"a_5\",str(input.a_5()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"a_5\",\"\\\\boxed{a_5}\")\n                    \n            if str(input.b_1()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_1\",str(input.b_1()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"b_1\",str(input.b_1()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"b_1\",str(input.b_1()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_1\",\"\\\\boxed{b_1}\")\n            \n            if str(input.b_2()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_2\",str(input.b_2()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"b_2\",str(input.b_2()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"b_2\",str(input.b_2()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_2\",\"\\\\boxed{b_2}\")\n            \n            if str(input.b_3()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_3\",str(input.b_3()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"b_3\",str(input.b_3()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"b_3\",str(input.b_3()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_3\",\"\\\\boxed{b_3}\")\n            \n            if str(input.b_4()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_4\",str(input.b_4()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"b_4\",str(input.b_4()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"b_4\",str(input.b_4()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_4\",\"\\\\boxed{b_4}\")\n            \n            if str(input.b_5()) != \"\" : \n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_5\",str(input.b_5()))\n                Compatability1.working_sym = Compatability1.working_sym.replace(\"b_5\",str(input.b_5()))\n                Compatability1.working_eqn_solver = Compatability1.working_eqn_solver.replace(\"b_5\",str(input.b_5()))\n            else:\n                Compatability1.working_eqn_latex = Compatability1.working_eqn_latex.replace(\"b_5\",\"\\\\boxed{b_5}\")\n\n# Dynamic Filling of Compatability equation 2\n        if Compatability2.newline_math in lookup_eqns:\n            Compatability2_list__LHS = [\"c_1\",\"c_2\",\"c_3\",\"c_4\",\"c_5\"]\n            Compatability2_list__RHS = [\"d_1\",\"d_2\",\"d_3\",\"d_4\",\"d_5\"]\n            Compatability2_list_LHS = Compatability2_list__LHS[:input.Compatability2_NumLHS()]\n            Compatability2_list_RHS = Compatability2_list__RHS[:input.Compatability2_NumRHS()]\n            Compatability2_list = Compatability2_list_LHS + Compatability2_list_RHS\n            Compatability2.working_sym = \",\".join(Compatability2_list)\n            Compatability2.working_eqn_latex = \"$$\" + \"+\".join(Compatability2_list_LHS) + \"=\" + \"+\".join(Compatability2_list_RHS)+\"$$\"\n            Compatability2.working_eqn_solver = \"Eq(\"+ \"+\".join(Compatability2_list_LHS) + \",\" + \"+\".join(Compatability2_list_RHS)+\")\"\n            \n            if str(input.c_1()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_1\",str(input.c_1()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"c_1\",str(input.c_1()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"c_1\",str(input.c_1()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_1\",\"\\\\boxed{c_1}\")\n            \n            if str(input.c_2()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_2\",str(input.c_2()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"c_2\",str(input.c_2()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"c_2\",str(input.c_2()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_2\",\"\\\\boxed{c_2}\")\n            \n            if str(input.c_3()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_3\",str(input.c_3()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"c_3\",str(input.c_3()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"c_3\",str(input.c_3()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_3\",\"\\\\boxed{c_3}\")\n            \n            if str(input.c_4()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_4\",str(input.c_4()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"c_4\",str(input.c_4()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"c_4\",str(input.c_4()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_4\",\"\\\\boxed{c_4}\")\n            \n            if str(input.c_5()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_5\",str(input.c_5()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"c_5\",str(input.c_5()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"c_5\",str(input.c_5()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"c_5\",\"\\\\boxed{c_5}\")\n                    \n            if str(input.d_1()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_1\",str(input.d_1()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"d_1\",str(input.d_1()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"d_1\",str(input.d_1()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_1\",\"\\\\boxed{d_1}\")\n            \n            if str(input.d_2()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_2\",str(input.d_2()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"d_2\",str(input.d_2()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"d_2\",str(input.d_2()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_2\",\"\\\\boxed{d_2}\")\n            \n            if str(input.d_3()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_3\",str(input.d_3()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"d_3\",str(input.d_3()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"d_3\",str(input.d_3()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_3\",\"\\\\boxed{d_3}\")\n            \n            if str(input.d_4()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_4\",str(input.d_4()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"d_4\",str(input.d_4()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"d_4\",str(input.d_4()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_4\",\"\\\\boxed{d_4}\")\n            \n            if str(input.d_5()) != \"\" : \n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_5\",str(input.d_5()))\n                Compatability2.working_sym = Compatability2.working_sym.replace(\"d_5\",str(input.d_5()))\n                Compatability2.working_eqn_solver = Compatability2.working_eqn_solver.replace(\"d_5\",str(input.d_5()))\n            else:\n                Compatability2.working_eqn_latex = Compatability2.working_eqn_latex.replace(\"d_5\",\"\\\\boxed{d_5}\")\n                \n                \n        eqnbank_working_latex = {\n        StaticsSumFx.name: StaticsSumFx.working_eqn_latex,\n        StaticsSumFy.name: StaticsSumFy.working_eqn_latex,\n        StaticsSumM.name: StaticsSumM.working_eqn_latex,\n        StressEqn.name: StressEqn.working_eqn_latex,\n        BendingStress.name: BendingStress.working_eqn_latex,\n        AxialDeform.name: AxialDeform.working_eqn_latex,\n        ThermalDeform.name: ThermalDeform.working_eqn_latex,\n        AreaTube.name: AreaTube.working_eqn_latex,\n        ITube.name: ITube.working_eqn_latex,\n        Compatability1.name: Compatability1.working_eqn_latex,\n        Compatability2.name: Compatability2.working_eqn_latex\n        }\n\n        eqnbank_working_solver = {\n        StaticsSumFx.name: StaticsSumFx.working_eqn_solver,\n        StaticsSumFy.name: StaticsSumFy.working_eqn_solver,\n        StaticsSumM.name: StaticsSumM.working_eqn_solver,\n        StressEqn.name: StressEqn.working_eqn_solver,\n        BendingStress.name: BendingStress.working_eqn_solver,\n        AxialDeform.name: AxialDeform.working_eqn_solver,\n        ThermalDeform.name: ThermalDeform.working_eqn_solver,\n        AreaTube.name: AreaTube.working_eqn_solver,\n        ITube.name: ITube.working_eqn_solver,\n        Compatability1.name: Compatability1.working_eqn_solver,\n        Compatability2.name: Compatability2.working_eqn_solver\n        }\n\n        symbank_working = {\n        StaticsSumFx.name: StaticsSumFx.working_sym,\n        StaticsSumFy.name: StaticsSumFy.working_sym,\n        StaticsSumM.name: StaticsSumM.working_sym,\n        StressEqn.name: StressEqn.working_sym,\n        BendingStress.name: BendingStress.working_sym,\n        AxialDeform.name: AxialDeform.working_sym,\n        ThermalDeform.name: ThermalDeform.working_sym,\n        AreaTube.name: AreaTube.working_sym,\n        ITube.name: ITube.working_sym,\n        Compatability1.name: Compatability1.working_sym,\n        Compatability2.name: Compatability2.working_sym\n        }\n        \n        working_eqns_latex = [eqnbank_working_latex[key] for key in eqns_keys]\n        working_SumFx_render.set(eqnbank_working_latex[\"Equilibrium Forces in X\"])\n        working_SumFy_render.set(eqnbank_working_latex[\"Equilibrium Forces in Y\"])\n        working_SumM_render.set(eqnbank_working_latex[\"Equilibrium Moments about O\"])\n        working_StressEqn_render.set(eqnbank_working_latex[\"Stress Equation\"])\n        working_BendingStress_render.set(eqnbank_working_latex[\"Bending Stress from a Moment\"])\n        working_AxialDeform_render.set(eqnbank_working_latex[\"Axial Deformation by Force\"])\n        working_ThermalDeform_render.set(eqnbank_working_latex[\"Axial Deformation by Thermal\"])\n        working_AreaTube_render.set(eqnbank_working_latex[\"Area of a Tube\"])\n        working_Itube_render.set(eqnbank_working_latex[\"Moment of Inertia of a Tube\"])\n        working_Compatability1_render.set(eqnbank_working_latex[\"Compatability Equation 1\"])\n        working_Compatability2_render.set(eqnbank_working_latex[\"Compatability Equation 2\"])\n        working_eqns_solver = [eqnbank_working_solver[key] for key in eqns_keys]\n        \n        temp_working_equations_solver = \"#\".join(working_eqns_solver)\n        temp_working_equations_solver = temp_working_equations_solver.replace(\"Eq\",\"Wrap_clash\")\n        temp_working_equations_solver = temp_working_equations_solver.replace(\"E\",\"E_clash\")\n        temp_working_equations_solver = temp_working_equations_solver.replace(\"I\",\"I_clash\")\n        temp_working_equations_solver = temp_working_equations_solver.replace(\"N\",\"N_clash\")\n        temp_working_equations_solver = temp_working_equations_solver.replace(\"Wrap_clash\",\"Eq\")\n        working_eqns_solver = temp_working_equations_solver.split(\"#\")\n        \n        #working_eqns_solver=[]\n        #for j in working_eqns_solver_pre:\n        #    temp=j.split(\",\")\n        #    temp2=temp.replace(\"I\",\"I_clash\")\n        #    temp3=temp2.replace(\"E\",\"E_clash\")\n        #    working_eqns_solver.append(temp3)\n        \n        working_syms = [symbank_working[key] for key in eqns_keys]\n        mystring_working_eqns = \"\".join(working_eqns_latex)\n        mystring_working_eqns = mystring_working_eqns.replace(\"*\",\"\\\\times\")\n        feedback_syms.set(working_syms)\n        working_equations_solver.set(working_eqns_solver)\n\n        working_syms_only=[]\n        for j in working_syms:\n            temp=j.split(\",\")\n            for k in temp:\n                try: \n                    float(eval(k))  \n                except:\n                    temp2=k.replace(\"I\",\"I_clash\")\n                    temp3=temp2.replace(\"E\",\"E_clash\")\n                    temp4=temp3.replace(\"N\",\"N_clash\")\n                    working_syms_only.append(temp4)\n        working_syms_only=list(dict.fromkeys(working_syms_only))\n        working_symbols.set(working_syms_only)\n        \n        return [\n            ui.markdown(mystring_working_eqns),\n            ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n            )\n        ]\n    \n    @output\n    @render.ui\n    def dyn_ui_nav():\n      \n        tab_Instructions = ui.nav(\n            \"Instructions\",ui.markdown(\"Please choose the equations you would like to use in this problem. As you do, tabs will load here which allow you to browse between active equations and define the necessary parameters or variables to set up your solution. As you fill in parameters and variables, the working palette will change to reflect what values you are plugging in and will give you a running update of the number of equations you have relative to the number of unknowns you have. A solve equations button will be available for when you are ready to solve and the system will provide the solution to your system of equations. &lt;br&gt; &lt;br&gt; Note: You may put in simple math into the blanks (e.g., 3*4 instead of 12) which can be helpful in specifying Moment values or performing unit conversions in place. At this time, you may not mix and match this math with variables (e.g., typing in 5x in the blank will not parse the 5 as a number and the x as a variable) &lt;br&gt; &lt;br&gt; Key issues still needing development include: support for units?, **FEEDBACK**, choosing a solution value from the solution set, parameterized problem statement values...\") \n        )\n    \n        tab_StaticsSumFy = ui.nav(\n                str(StaticsSumFy.inline_math),\n                ui.markdown(working_SumFy_string()),\n                ui.input_numeric(\"NumForcesY\",\"How many terms do you want?\",value=NumForcesY(),min=2,max=5),\n                ui.input_text(\"F1y\",\"\\(F_{y_1}=\\)\", value=F1y(),placeholder=\"Please type in variable or value\"),\n                ui.input_text(\"F2y\",\"\\(F_{y_2}=\\)\", value=F2y(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.NumForcesY&gt;=3\", ui.input_text(\"F3y\",\"\\(F_{y_3}=\\)\", value=F3y(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesY&gt;=4\", ui.input_text(\"F4y\",\"\\(F_{y_4}=\\)\", value=F4y(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesY&gt;=5\", ui.input_text(\"F5y\",\"\\(F_{y_5}=\\)\", value=F5y(),placeholder=\"Please type in variable or value\"))\n                )\n        \n        tab_StaticsSumFx = ui.nav(\n                str(StaticsSumFx.inline_math),\n                ui.markdown(working_SumFx_string()),\n                ui.input_numeric(\"NumForcesX\",\"How many terms do you want?\",value=NumForcesX(),min=2,max=5),\n                ui.input_text(\"F1x\",\"\\(F_{x_1}=\\)\", value=F1x(),placeholder=\"Please type in variable or value\"),\n                ui.input_text(\"F2x\",\"\\(F_{x_2}=\\)\", value=F2x(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.NumForcesX&gt;=3\", ui.input_text(\"F3x\",\"\\(F_{x_3}=\\)\", value=F3x(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesX&gt;=4\", ui.input_text(\"F4x\",\"\\(F_{x_4}=\\)\", value=F4x(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.NumForcesX&gt;=5\", ui.input_text(\"F5x\",\"\\(F_{x_5}=\\)\", value=F5x(),placeholder=\"Please type in variable or value\"))\n                )\n        \n        tab_StaticsSumM = ui.nav(\n                str(StaticsSumM.inline_math),\n                ui.markdown(working_SumM_string()),\n                ui.input_numeric(\"NumMoments\",\"How many terms do you want?\",value=NumMoments(),min=2,max=5),\n                ui.input_text(\"M1\",\"\\(M_1=\\)\", value=M1(),placeholder=\"Please type in variables, values, or numeric math (e.g., (3*4))\"),\n                ui.input_text(\"M2\",\"\\(M_2=\\)\", value=M2(),placeholder=\"Please type in variables, values, or numeric math (e.g., (3*4))\"),\n                ui.panel_conditional(\"input.NumMoments&gt;=3\", ui.input_text(\"M3\",\"\\(M_3=\\)\", value=M3(),placeholder=\"Please type in variable, values, or numeric math (e.g., (3*4))\")),\n                ui.panel_conditional(\"input.NumMoments&gt;=4\", ui.input_text(\"M4\",\"\\(M_4=\\)\", value=M4(),placeholder=\"Please type in variable , values, or numeric math (e.g., (3*4))\")),\n                ui.panel_conditional(\"input.NumMoments&gt;=5\", ui.input_text(\"M5\",\"\\(M_5=\\)\", value=M5(),placeholder=\"Please type in variable , values, or numeric math (e.g., (3*4))\"))\n                )\n        \n        tab_StressEqn = ui.nav(\n                str(StressEqn.inline_math),\n                ui.markdown(working_StressEqn_string()),\n                ui.input_text(\"sigma\",\"\\(\\sigma\\)\", value=axial_stress_sigma(),placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"force\",\"\\(F\\)\", value=axial_stress_force(),placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"area\",\"\\(A\\)\", value=axial_stress_area(),placeholder=\"Please type in variables or values\"),\n                )\n        \n        tab_BendingStress = ui.nav(\n                str(BendingStress.inline_math),\n                ui.markdown(working_BendingStress_string()),\n                ui.input_text(\"bendingstress_sigma_b\",\"\\(\\sigma_b\\)\", value=bending_stress_sigma(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"bendingstress_M\",\"\\(M\\)\", value=bending_stress_M(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"bendingstress_y\",\"\\(y\\)\", value=bending_stress_y(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"bendingstress_I\",\"\\(I\\)\", value= bending_stress_I(), placeholder=\"Please type in variables or values\"),\n                )\n        \n        tab_AxialDeform = ui.nav(\n                str(AxialDeform.inline_math),\n                ui.markdown(working_AxialDeform_string()),\n                ui.input_text(\"axial_delta_l\",\"\\(\\delta_l\\)\", value=axial_delta_l(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"axial_P\",\"\\(P\\)\", value=axial_P(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"axial_L\",\"\\(L\\)\", value=axial_L(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"axial_A\",\"\\(A\\)\", value=axial_A(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"axial_E\",\"\\(E\\)\", value=axial_E(), placeholder=\"Please type in variables or values\"),\n                )\n        \n        tab_ThermalDeform = ui.nav(\n                str(ThermalDeform.inline_math),\n                ui.markdown(working_ThermalDeform_string()),\n                ui.input_text(\"thermal_delta_t\",\"\\(\\delta_t\\)\", value=thermal_delta_t(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"thermal_alpha\",\"\\(\\\\alpha\\)\", value=thermal_alpha(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"thermal_Delta_T\",\"\\(\\Delta T\\)\", value=thermal_Delta_T(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"thermal_L\",\"\\(L\\)\", value=thermal_L(), placeholder=\"Please type in variables or values\"),\n                )\n        \n        tab_AreaTube = ui.nav(\n                str(AreaTube.inline_math),\n                ui.markdown(working_AreaTube_string()),\n                ui.input_text(\"A_tube\",\"\\(A_{tube}=\\)\", value=area_tube_A_tube(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ar_o\",\"\\(r_o=\\)\", value=area_tube_Ar_o(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ar_i\",\"\\(r_i\\)\", value=area_tube_Ar_i(), placeholder=\"Please type in variables or values\")\n                )\n        \n        tab_ITube = ui.nav(\n                str(ITube.inline_math),\n                ui.markdown(working_Itube_string()),\n                ui.input_text(\"I_tube\",\"\\(I_{tube}=\\)\", value=I_tube_I_tube(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ir_o\",\"\\(r_o=\\)\", value=I_tube_Ir_o(), placeholder=\"Please type in variables or values\"),\n                ui.input_text(\"Ir_i\",\"\\(r_i\\)\", value=i_tube_Ir_i(), placeholder=\"Please type in variables or values\"),\n                )\n        \n        tab_Compatability1 = ui.nav(\n                str(Compatability1.inline_math),\n                ui.markdown(working_Compatability1_string()),\n                ui.input_numeric(\"Compatability1_NumLHS\",\"How many 'a' terms do you want?\",value=Compatability1_NumLHS(),min=1,max=5),\n                ui.input_numeric(\"Compatability1_NumRHS\",\"How many 'b' terms do you want?\",value=Compatability1_NumRHS(),min=1,max=5),\n                ui.input_text(\"a_1\",\"\\(a_1=\\)\", value=Compatability1_a_1(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.Compatability1_NumLHS&gt;=2\",ui.input_text(\"a_2\",\"\\(a_2=\\)\", value=Compatability1_a_2(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumLHS&gt;=3\", ui.input_text(\"a_3\",\"\\(a_3=\\)\", value=Compatability1_a_3(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumLHS&gt;=4\", ui.input_text(\"a_4\",\"\\(a_4=\\)\", value=Compatability1_a_4(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumLHS&gt;=5\", ui.input_text(\"a_5\",\"\\(a_5=\\)\", value=Compatability1_a_5(),placeholder=\"Please type in variable or value\")),\n                ui.input_text(\"b_1\",\"\\(b_1=\\)\", value=Compatability1_b_1(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.Compatability1_NumRHS&gt;=2\",ui.input_text(\"b_2\",\"\\(b_2=\\)\", value=Compatability1_b_2(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumRHS&gt;=3\",ui.input_text(\"b_3\",\"\\(b_3=\\)\", value=Compatability1_b_3(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumRHS&gt;=4\",ui.input_text(\"b_4\",\"\\(b_4=\\)\", value=Compatability1_b_4(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability1_NumRHS&gt;=5\",ui.input_text(\"b_5\",\"\\(b_5=\\)\", value=Compatability1_b_5(),placeholder=\"Please type in variable or value\")),\n                )\n        \n        tab_Compatability2 = ui.nav(\n                str(Compatability2.inline_math),\n                ui.markdown(working_Compatability2_string()),\n                ui.input_numeric(\"Compatability2_NumLHS\",\"How many 'c' terms do you want?\",value=Compatability2_NumLHS(),min=1,max=5),\n                ui.input_numeric(\"Compatability2_NumRHS\",\"How many 'd' terms do you want?\",value=Compatability2_NumRHS(),min=1,max=5),\n                ui.input_text(\"c_1\",\"\\(c_1=\\)\", value=Compatability2_c_1(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.Compatability2_NumLHS&gt;=2\",ui.input_text(\"c_2\",\"\\(c_2=\\)\", value=Compatability2_c_2(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumLHS&gt;=3\", ui.input_text(\"c_3\",\"\\(c_3=\\)\", value=Compatability2_c_3(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumLHS&gt;=4\", ui.input_text(\"c_4\",\"\\(c_4=\\)\", value=Compatability2_c_4(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumLHS&gt;=5\", ui.input_text(\"c_5\",\"\\(c_5=\\)\", value=Compatability2_c_5(),placeholder=\"Please type in variable or value\")),\n                ui.input_text(\"d_1\",\"\\(d_1=\\)\", value=Compatability2_d_1(),placeholder=\"Please type in variable or value\"),\n                ui.panel_conditional(\"input.Compatability2_NumRHS&gt;=2\",ui.input_text(\"d_2\",\"\\(d_2=\\)\", value=Compatability2_d_2(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumRHS&gt;=3\",ui.input_text(\"d_3\",\"\\(d_3=\\)\", value=Compatability2_d_3(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumRHS&gt;=4\",ui.input_text(\"d_4\",\"\\(d_4=\\)\", value=Compatability2_d_4(),placeholder=\"Please type in variable or value\")),\n                ui.panel_conditional(\"input.Compatability2_NumRHS&gt;=5\",ui.input_text(\"d_5\",\"\\(d_5=\\)\", value=Compatability2_d_5(),placeholder=\"Please type in variable or value\")),\n                )\n\n        tab_bank = {\n                StaticsSumFx.name: tab_StaticsSumFx,\n                StaticsSumFy.name: tab_StaticsSumFy,\n                StaticsSumM.name: tab_StaticsSumM,\n                StressEqn.name: tab_StressEqn,\n                BendingStress.name: tab_BendingStress,\n                AxialDeform.name: tab_AxialDeform,\n                ThermalDeform.name: tab_ThermalDeform,\n                AreaTube.name: tab_AreaTube,\n                ITube.name: tab_ITube,\n                Compatability1.name: tab_Compatability1,\n                Compatability2.name: tab_Compatability2,\n                }\n        eqns_keys = input.selected_eqns()\n        tabs = [tab_bank[key] for key in eqns_keys]\n        tabs.insert(0,tab_Instructions)\n        equations = ui.navset_tab_card(*tabs,id=\"mytab\",selected=active_eqn_tab())                    \n    \n        return [equations,\n               ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n        ),]\n\n    @output\n    @render.ui\n    def ui_equation_bookkeeping():\n        req(working_equations_solver())\n        num_working_equations=len(working_equations_solver())\n        num_working_symbols=len(working_symbols())\n        string_working_symbols= \"\\\\\\\\(\"+\"\\\\\\\\),\\\\\\\\(\".join(working_symbols())+\"\\\\\\\\)\"\n        string_working_symbols=string_working_symbols.replace(\"N_clash\",\"N\")\n        string_working_symbols=string_working_symbols.replace(\"I_clash\",\"I\")\n        string_working_symbols=string_working_symbols.replace(\"E_clash\",\"E\")\n        string_working_symbols=string_working_symbols.replace(\"delta\",\"\\delta\")\n        string_working_symbols=string_working_symbols.replace(\"Delta\",\"\\Delta\")\n        string_working_symbols=string_working_symbols.replace(\"sigma\",\"\\sigma\")\n        return [ui.markdown(f\"Your equation-solver set up currently has **{num_working_equations} equations** and **{num_working_symbols} unknowns**. &lt;br&gt;  Your current unknowns are {string_working_symbols}\"), \n                ui.input_action_button(\n                    \"solveEquations\", \"Solve Equations\", class_=\"btn-success\", width=\"240px\", style='margin-bottom:10px'),\n                ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n                )]\n        \n    @output\n    @render.ui\n    @reactive.event(input.solveEquations)\n    def ui_solutions():\n        for j in working_symbols():\n            j=Symbol(j)\n        print(working_equations_solver())\n        print(working_symbols())\n        my_solver_equations=[]\n        for m in working_equations_solver():\n            m=parse_expr(m)\n        solve_eqns = solve(working_equations_solver(),working_symbols(),dict=True)\n        answers=[]\n        for k in working_symbols():\n            try: \n                temp=solve_eqns[0][parse_expr(k)]\n                temp2=\"$$\"+k+\"=\"+f'{temp:.2f}'+\"$$\"\n                answers.append(temp2)\n            except:\n                pass\n        mystring_answers=\"\".join(answers)\n        mystring_answers=mystring_answers.replace(\"pi\",\"\\pi\")\n        mystring_answers=mystring_answers.replace(\"delta\",\"\\delta\")\n        mystring_answers=mystring_answers.replace(\"Delta\",\"\\Delta\")\n        mystring_answers=mystring_answers.replace(\"sigma\",\"\\sigma\")\n        mystring_answers=mystring_answers.replace(\"E_clash\",\"E\")\n        mystring_answers=mystring_answers.replace(\"I_clash\",\"I\")\n        mystring_answers=mystring_answers.replace(\"N_clash\",\"N\")\n        #feedback_solns.set(mystring_answers)\n        return [ui.markdown(f\"Your solution is {mystring_answers}\"),\n                ui.input_text(\"answer\",\"Answer:\",placeholder=\"Please type in your answer\"),\n                ui.input_action_button(\"feedback\", \"Check answer and show feedback\"),\n                ui.download_button(\"download2\", \"Download PNG\"),\n                ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n                )]\n\n    #@reactive.Effect\n    #def _():\n\n     #   active_eqn_tab.set(input.mytab())\n    \n    \n    @reactive.Effect\n    def _():\n\n        input.selected_eqns()\n        active_eqn_tab.set(input.mytab())\n        \n        working_SumFx_render()\n        working_SumFy_render()\n        working_SumM_render()\n        working_StressEqn_render()\n        working_BendingStress_render()\n        working_AxialDeform_render()\n        working_ThermalDeform_render()\n        working_AreaTube_render()\n        working_Itube_render()\n        working_Compatability1_render()\n        working_Compatability2_render()\n                \n        with reactive.isolate():\n            if \"Equilibrium Forces in Y\" in input.selected_eqns(): \n                NumForcesY.set(input.NumForcesY())\n                F1y.set(input.F1y())\n                F2y.set(input.F2y())\n                F3y.set(input.F3y())\n                F4y.set(input.F4y())\n                F5y.set(input.F5y())\n                working_SumFy_string.set(str(working_SumFy_render()))\n            else:\n                 pass             \n    \n            if \"Equilibrium Forces in X\" in input.selected_eqns(): \n                NumForcesX.set(input.NumForcesX())\n                F1x.set(input.F1x())\n                F2x.set(input.F2x())\n                F3x.set(input.F3x())\n                F4x.set(input.F4x())\n                F5x.set(input.F5x())\n                working_SumFx_string.set(str(working_SumFx_render()))\n            else:\n                 pass\n                              \n            if \"Equilibrium Moments about O\" in input.selected_eqns(): \n                NumMoments.set(input.NumMoments())\n                M1.set(input.M1())\n                M2.set(input.M2())\n                M3.set(input.M3())\n                M4.set(input.M4())\n                M5.set(input.M5())\n                working_SumM_string.set(str(working_SumM_render()))\n            else:\n                 pass\n                \n            if \"Stress Equation\" in input.selected_eqns(): \n                axial_stress_sigma.set(input.sigma())\n                axial_stress_force.set(input.force())\n                axial_stress_area.set(input.area())\n                working_StressEqn_string.set(str(working_StressEqn_render()))\n            else:\n                 pass\n            \n            if \"Axial Deformation by Force\" in input.selected_eqns(): \n                axial_delta_l.set(input.axial_delta_l())\n                axial_P.set(input.axial_P())\n                axial_L.set(input.axial_L())\n                axial_A.set(input.axial_A())\n                axial_E.set(input.axial_E())\n                working_AxialDeform_string.set(str(working_AxialDeform_render()))\n            else:\n                 pass\n            \n            if \"Axial Deformation by Thermal\" in input.selected_eqns(): \n                thermal_delta_t.set(input.thermal_delta_t())\n                thermal_alpha.set(input.thermal_alpha())\n                thermal_Delta_T.set(input.thermal_Delta_T())\n                thermal_L.set(input.thermal_L())\n                working_ThermalDeform_string.set(str(working_ThermalDeform_render()))\n            else:\n                 pass\n    \n            if \"Area of a Tube\" in input.selected_eqns(): \n                area_tube_A_tube.set(input.A_tube())\n                area_tube_Ar_o.set(input.Ar_o())\n                area_tube_Ar_i.set(input.Ar_i())\n                working_AreaTube_string.set(str(working_AreaTube_render()))\n            else:\n                 pass\n    \n            if \"Moment of Inertia of a Tube\" in input.selected_eqns():           \n                I_tube_I_tube.set(input.I_tube())\n                I_tube_Ir_o.set(input.Ir_o())\n                i_tube_Ir_i.set(input.Ir_i())\n                working_Itube_string.set(str(working_Itube_render()))\n            else:\n                 pass\n    \n            if \"Bending Stress from a Moment\" in input.selected_eqns(): \n                bending_stress_sigma.set(input.bendingstress_sigma_b())\n                bending_stress_M.set(input.bendingstress_M())\n                bending_stress_y.set(input.bendingstress_y())\n                bending_stress_I.set(input.bendingstress_I())\n                working_BendingStress_string.set(str(working_BendingStress_render()))\n            else:\n                 pass\n    \n            if \"Compatability Equation 1\" in input.selected_eqns(): \n                Compatability1_NumLHS.set(input.Compatability1_NumLHS())\n                Compatability1_NumRHS.set(input.Compatability1_NumRHS())\n                Compatability1_a_1.set(input.a_1())\n                Compatability1_a_2.set(input.a_2())\n                Compatability1_a_3.set(input.a_3())\n                Compatability1_a_4.set(input.a_4())\n                Compatability1_a_5.set(input.a_5())\n                Compatability1_b_1.set(input.b_1())\n                Compatability1_b_2.set(input.b_2())\n                Compatability1_b_3.set(input.b_3())\n                Compatability1_b_4.set(input.b_4())\n                Compatability1_b_5.set(input.b_5())\n                working_Compatability1_string.set(str(working_Compatability1_render()))\n            else:\n                 pass\n    \n            if \"Compatability Equation 2\" in input.selected_eqns(): \n                Compatability2_NumLHS.set(input.Compatability2_NumLHS())\n                Compatability2_NumRHS.set(input.Compatability2_NumRHS())\n                Compatability2_c_1.set(input.c_1())\n                Compatability2_c_2.set(input.c_2())\n                Compatability2_c_3.set(input.c_3())\n                Compatability2_c_4.set(input.c_4())\n                Compatability2_c_5.set(input.c_5())\n                Compatability2_d_1.set(input.d_1())\n                Compatability2_d_2.set(input.d_2())\n                Compatability2_d_3.set(input.d_3())\n                Compatability2_d_4.set(input.d_4())\n                Compatability2_d_5.set(input.d_5())\n                working_Compatability2_string.set(str(working_Compatability2_render()))\n            else:\n                 pass\n\n                \n    @reactive.Effect\n    @reactive.event(input.feedback)\n    def _():\n        inst_eqns=[eqnbank_newline[key] for key in [\"Equilibrium Forces in Y\", \"Equilibrium Moments about O\",\"Stress Equation\", \"Area of a Tube\",\"Moment of Inertia of a Tube\", \"Bending Stress from a Moment\",\"Compatability Equation 1\"]]\n        inst_soln=\"6520\"\n        inst_unknowns=[\"N\",\"M_o\",\"\\sigma_b\", \"\\sigma_l\",\"A_{tube}\",\"I_{tube}\",\"\\sigma_{max}\"]\n        attempt_equations=feedback_equations()\n        attempt_soln=input.answer()\n        attempt_unknowns=feedback_syms()\n        missing_inst_eqns=set(inst_eqns).difference(attempt_equations)\n        extra_student_eqns=set(attempt_equations).difference(inst_eqns)\n        \n        if inst_soln==attempt_soln:\n          feedback_message=ui.markdown(\"Congratulations! You are correct, great work.\")\n        else:\n          feedback_message=ui.markdown(f\"This feedback is the list method -- checking your selected equations and associated parameters with instructor provided equations and unknowns. In this check, the instructor used these equations which you did not use {missing_inst_eqns} and you used these equations that the instructor did not use {extra_student_eqns}. This may help you think through any errors in your logic or could just be an indicator that you are approaching the problem differently which could still be correct. Further, looking at the unknown variables in each solution, you used these unknowns in your system of equations {attempt_unknowns} and the instructor used the following unknowns {inst_unknowns}. Again, this may help you think through possible errors in your logic or could just be an indicator that you used a different naming convention and/or are approaching the problem differently which could still be correct.\")\n        \n        m = ui.modal(\n            feedback_message, ui.tags.script(\n                \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n                ),\n            title=\"Feedback on your solution\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n        \n    @session.download(filename=\"image.png\")\n    def download2():\n        fig, ax = plt.subplots()\n        ax.text(.2, .6, r'an equation: $E=mc^2$', fontsize=15)\n        ax = fig.add_subplot()\n        #fig.subplots_adjust(top=0.85)\n\n\n        # Set both x- and y-axis limits to [0, 10] instead of default [0, 1]\n        ax.axis([0, 10, 0, 10])\n\n        ax.text(2, 6, r'an equation:$E=mc^2$', fontsize=15)\n\n        with io.BytesIO() as buf:\n            plt.savefig(buf, format=\"png\")\n            yield buf.getvalue()\n                \napp = App(app_ui, server)"
  },
  {
    "objectID": "workoutsolution.html#worked-out-solution",
    "href": "workoutsolution.html#worked-out-solution",
    "title": "2Â  Workout Example Solution",
    "section": "2.1 Worked Out Solution",
    "text": "2.1 Worked Out Solution\nThis demonstrates a worked out solution to the problem. The best way to begin is by drawing a free body diagram.\n\n\n\nFigure 3: Three traffic light installation with loads\n\n\nUse equilibrium equations to find the internal loads:\n\\[\n\\Sigma F_y=0: N-65-50-50=0\\\\\n\\] \\[N=165~lbs\n\\]\n\\[\n\\Sigma M_O=0: -M+(50\\times7)+(50\\times11)+(65\\times15)=0\n\\\\\\] \\[\nM=1875~lb\\cdot ft=22500~lb\\cdot in\n\\]\nNow, determine the cross-sectional properties:\n\\[\nA=\\pi(r_0^2-r_i^2)=\\pi(2.5^2-2.3^2)=3.02~in^2\n\\\\\nI=\n\\frac{\\pi}{4}\n(r_0^4-r_i^4)=\\frac{\\pi}{4}(2.5^4-2.3^4)=8.70~in^4\n\\]\nCalculate stress due to normal force:\n\\[\n\\sigma_n=\\frac{F}{A}=\\frac{-165~lbs}{3.02~in^2}=-54.7~psi\n\\]\nCalculate maximum stress due to bending moment (will have same magnitude in both tension and compression):\n\\[\n\\sigma_m=\\pm\\frac{M_c}{I}=\\pm\\frac{22500\\times2.5}{8.70}=\\pm6460~psi\n\\]\nDetermine combined tensile stress: \\(\\sigma_T=-54.7+6460=6410~psi\\)\nDetermine combined compressive stress: \\(\\sigma_T=-54.7-6460=-6520~psi\\)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3Â  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  }
]